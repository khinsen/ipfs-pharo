{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.075604+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.075604+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+WyrFl+CDQCWvnTAAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Until now, we have seen only one way to reference data on IPFS: the content identifier (CID). In this part, we will first look at *paths*, which provide a more flexible way to refer to data, and then move on to *names*, which provide stable references to changing data."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.075984+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.075984+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vW2rFl+CDQCWv+5WAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Paths"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076105+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076105+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GW6rFl+CDQCWwHGQAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A CID always points to a block, i.e. a sequence of bytes. A path allows to reference smaller pieces of data located inside a block, by starting from a CID and following a sequence of links. IPFS-based software tends to use paths rather than CIDs at user or programming interfaces. In everyday practice, CIDs are mainly used as elements of paths."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076126+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076126+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "JG6rFl+CDQCWwcpWAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let's start with a path that is fully equivalent to a CID:\r{{gtExample:name=IpfsExamples>>#pathToNestedDataStructure}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076136+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076136+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LG6rFl+CDQCWwuBLAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Adding a link to this path makes it point directly to the referenced data:\r{{gtExample:name=IpfsExamples>>#pathIntoNestedDataStructure}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076143+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076143+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "M26rFl+CDQCWw3nhAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We can see this by resolving the path, which means following links as far as possible:\r{{gtExample:name=IpfsExamples>>#resolvedPathIntoNestedDataStructure}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076151+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076151+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O26rFl+CDQCWxL+IAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As the phrase \"as far as possible\" suggests, some paths cannot be resolved to the last link. A link can be resolved only if its value is a CID. Here is an example that is not resolvable:\r{{gtExample:name=IpfsExamples>>#nonResolvablePathIntoNestedDataStructure}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076158+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076158+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Qm6rFl+CDQCWxXm9AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Data objects can be loaded from a path just like from a CID. The only exception is loading raw blocks, which can only be done from CIDs because paths with non-resolvable links do not correspond to a block. For a fully resolved path, loading is equivalent to loading a CID:\r{{gtExample:name=IpfsExamples>>#loadResolvedPath}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076165+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076165+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "SW6rFl+CDQCWxoj2AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "For a path with non-resolvable links, loading the data yields just the part referred to by the link:\r{{gtExample:name=IpfsExamples>>#loadNonResolvablePath}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076172+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076172+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UG6rFl+CDQCWx9laAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Names"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076179+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076179+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Vm6rFl+CDQCWyLpNAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Since CIDs are computed from the data they refer to, even the tiniest change in a data structures leads to a different CID. So how do you refer to, say, your Web site, while retaining the option to change it from time to time? The main mechanism for this task in IPFS is IPNS, the Inter-Planetary Naming System. Before explaining how it works, let me point out that it is far less advanced than the parts of IPFS I have described before. IPNS works, but it is far too slow for many relevant use cases. This is well-known and people are working on it, but for now, be prepared for long delays when running the examples in this section."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076184+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076184+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "XW6rFl+CDQCWyTT8AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A name in IPNS is much like a variable in a programming language: it is a name to which different values can be assigned in the course of time. The value of a name in IPNS is a path. You can thus define a name for your Web site, and every time you make a change, you assign the new path containing the new CID to the name."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076191+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076191+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "YW6rFl+CDQCWysy5AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What makes IPNS names more challenging to handle is that they are globally visible on the network of IPFS peers. One resulting challenge is naming conflicts. You can't just let everyone pick a string of characters and use it on IPNS, as people tend to like the same character strings. The second challenge is access control. You want to be the only person who is allowd to update your Web site, or maybe share that right with a select few others. The third challenge is propagating changes across the network. That last challenge is still not solved well enough, and that's why IPNS is so slow."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076195+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076195+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Zm6rFl+CDQCWy4wxAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "IPNS' answer to the first two challenges is to use randomly generated cryptographic key pairs as names. More precisely, the name is a character string representation of the public key, and the private key is what you must have to change the value of the name. The main downside of this approach is that names are not particularly memorizable. They are meaningless character strings, exactly like CIDs. Today's IPFS implementation provides a [second naming system that is based on Internet domains](>https://docs.ipfs.io/guides/concepts/dnslink/), but you can use that system only if you are the owner of a domain, and you have to use your domain registrar's tools to update the values of domain-derived names. Therefore I won't discuss this second system, and stick to IPNS."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076201+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076201+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bW6rFl+CDQCWzBzaAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Our first action is creating a new cryptographic key pair:\r{{gtExample:name=IpfsExamples>>#ipnsKey}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076207+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076207+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "c26rFl+CDQCWzWWyAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Keys are managed by the IPFS daemon to which Pharo connects, so they are local to a computer. This is why key generation is handled by {{gtClass:name=IpfsPeer}}. Within each peer, keys are identified by a unique name, which we choose to be `#PharoIPFSTest`. If a key with that name already exists, it will be returned unmodified, so \"generateKey\" really means \"generate if it doesn't exist already\"."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076214+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076214+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "em6rFl+CDQCWzse+AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Even though keys are managed by a daemon local to a computer, that doesn't mean that they cannot be shared among multiple machines. They can, but this currently requires some manual intervention. The `go-ipfs` implementation of the daemon stores keys in `$HOME/.ipfs/keystore`, and you can copy them from there to the equivalent location on another machine. Such a shared key can be used on either computer for changing the value of the name, it's always the last one that is valid. The possibility of sharing keys explains why IPNS name lookups are slow even for names defined locally on your computer: IPFS still asks the network if a newer value exists somewhere."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076232+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076232+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "km6rFl+CDQCWz5f3AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Now that we have a key, we can *publish* data using that key, which is IPNS jargon for assigning a new value to a name. We can use either a CID or a path as the data to be published:\r{{gtExample:name=IpfsExamples>>#publishCid}}\r{{gtExample:name=IpfsExamples>>#publishPath}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076247+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076247+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "nG6rFl+CDQCW0A1YAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "When we resolve the key (warning: another slow operation!), we always get a path:\r{{gtExample:name=IpfsExamples>>#resolveIpnsKey}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076256+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076256+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pG6rFl+CDQCW0TzNAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "There is also a path notation using keys instead of CIDs:\r{{gtExample:name=IpfsExamples>>#ipnsPath}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076263+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076263+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "q26rFl+CDQCW0s0wAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So instead of resolving a key, we can also resolve the path:\r{{gtExample:name=IpfsExamples>>#resolveIpnsPath}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.07627+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.07627+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "sm6rFl+CDQCW0x8xAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And we can also immediately load the data from a name-based path:\r{{gtExample:name=IpfsExamples>>#loadIpnsPath}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076295+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076295+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "y26rFl+CDQCW1Ag0AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Finally, you might be tempted to inspect the IPNS paths from these examples on a different computer or using different software. This won't work, because the examples delete the key `#PharoIPFSTest` immediately after terminating, in order to prevent namespace pollution in your IPFS da. But you should by now be able to write your own code snippet to publish data to a more permanent key!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076303+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.076303+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "026rFl+CDQCW1bPoAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## The future"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076317+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076317+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "4W6rFl+CDQCW12+6AqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "- Asynchronous retrieval. For not-so-popular data, IPFS can be a bit slow, and IPNS is currently a lot worse."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076324+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076324+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "6G6rFl+CDQCW2FiLAqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "- Support for pinning services. For now you can only pin on your own computer, which is insufficient in some situations. On a mobile device, pinning is great to keep an off-line copy of something, but if you want to publish data, you must pin it on a permanently connected server."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076329+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076329+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "626rFl+CDQCW2RaxAqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "- Low-level improvements. In particular, Pharo ought to use CBOR directly, rather than use the IPFS server's JSON interface which adds another layer of conversion."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076333+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:51.076333+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "726rFl+CDQCW2vG1AqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "- A Pharo implementation of CID computation from the data, to make it more transparent."
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.07631+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:51.07631+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2m6rFl+CDQCW1lU2AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "There remains a lot to be done, so please check the [GitHub repository](https://github.com/khinsen/ipfs-pharo) of this project regularly for updates. Contributions of any kind are welcome too! Here is an incomplete list of what is missing for now:"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-06-30T17:26:51.075527+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-06-30T17:26:51.075527+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "IPFS Tutorial, part 3: beyond CIDs"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "ac6aab16-5f82-0d00-96bd-f37c02a24e5b"
	}
}