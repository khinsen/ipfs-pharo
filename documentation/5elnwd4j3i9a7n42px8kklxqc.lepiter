{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667669+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667669+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "k8NkFV+CDQCWp++nAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I have briefly mentioned codecs in part 1. A codec defines how a block (i.e. a sequence of bytes) is interpreted. IPFS uses mainly two codecs which I will discuss below, but it can also handle a couple of codecs for \"foreign\" data types, such as git commits. This is part of a sub-project of IPFS called [IPLD](http://ipld.io) (Inter-Planetary Linked Data)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:29.667952+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:29.667952+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "eMRkFV+CDQCWqU4EAqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "1. file contents (byte sequences again, but they are stored as a sequence of multiple blocks to limit block sizes)"
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:29.667964+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:29.667964+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "gMRkFV+CDQCWquuNAqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "1. files (contents plus file name and other metadata)"
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:29.66797+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2021-06-30T17:26:29.66797+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "hcRkFV+CDQCWq56nAqJOWw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "1. directories (lists of named files and directories)"
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667887+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667887+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "RsRkFV+CDQCWqNp5AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The two main codecs are the first-generation \"protobuf\" and the second-generation \"cbor\" codecs. Protobuf has been used by IPFS since its beginnings for describing file system structures. Using protobuf blocks, you can describe"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667976+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667976+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jMRkFV+CDQCWrAhMAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Using the IPFS command-line utility, you can easily upload files or whole directories to IPFS. But access at this level is not (yet?) much supported in Pharo, because the second-generation data structures are much more interesting in my humble opinion. Moreover, IPFS is currently in transition to a new file system structure that will be built on the \"cbor\" codec as well. But if you want to see a protobuf CID in action, here is one:\r{{gtExample:name=IpfsExamples>>#protobufCid|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667983+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667983+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "k8RkFV+CDQCWreI9AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Linked data: the CBOR codec"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.66799+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.66799+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "msRkFV+CDQCWrkYsAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "[CBOR](https://cbor.io/) (Concise Binary Object Representation) is a Web standard that is best summarized as a compact binary variant of JSON. A cbor-encoded block is thus equivalent to a JSON object. The IPFS flavor of CBOR adds one important object type to plain CBOR: the CID. A cbor-encoded block in IPFS is thus the equivalent of an arbitrary JSON data structure that can contain links to other blocks."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667997+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.667997+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ocRkFV+CDQCWrxLfAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let's start with a string:\r{{gtExample:name=IpfsExamples>>#cborCidForString|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668022+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:37:03.466247+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vMRkFV+CDQCWsCrUAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Or a float:\r{{gtExample:name=IpfsExamples>>#cborCidForFloat|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668032+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668032+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "xMRkFV+CDQCWsQGCAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Arrays are also supported:\r{{gtExample:name=IpfsExamples>>#cborCidForArray|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668039+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668039+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "y8RkFV+CDQCWsj73AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As are JSON-style maps (a bit more limited than Pharo dictionaries, because the keys must be strings), which in Pharo are represented by {{gtClass:name=NeoJSONObject}}:\r{{gtExample:name=IpfsExamples>>#cborCidForJSONMap|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668046+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668046+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0cRkFV+CDQCWs+B5AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Arrays can contain CIDs:\r{{gtExample:name=IpfsExamples>>#cborCidForArrayWithReferences|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668052+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668052+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2MRkFV+CDQCWtC2eAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "JSON maps can contain CIDs as well, but only as values, not as keys:\r{{gtExample:name=IpfsExamples>>#cborCidForJSONMapWithReference|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.66806+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.66806+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "38RkFV+CDQCWtQWmAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Feel free to look at all these examples in the IPFS Web explorer as well - just paste the CID string into the explorer. Once you are conviced that all this works as avertised, we can move on to the next level."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668067+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668067+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "58RkFV+CDQCWtuMqAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Pharo objects"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668073+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668073+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7cRkFV+CDQCWtxeNAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Wouldn't it be nice if we could store and retrieve Pharo objects directly? No need to send me an e-mail with your answer, I can guess it. So here we go."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.66808+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.66808+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "9MRkFV+CDQCWuGn2AqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "First of all, Pharo already has two object serializers with different strengths and weaknesses: [STON](https://github.com/svenvc/ston) and [Fuel](https://rmod.inria.fr/web/software/Fuel). The output of either one can be stored in IPFS. But neither of them supports *linked* data in the IPFS sense. If you want to be able to put CIDs inside your objects in a way that other IPFS software can work with, you have to encode Pharo objects as CBOR blocks. This is the approach I am taking. More generally, my intention is to store Pharo objects in such a way that they can be processed with other languages reasonably well, by choosing lightweight JSON-like representations. This is very much work in progress, as only a few classes are supported at the moment, and even their representations might change in the future."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668087+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668087+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+8RkFV+CDQCWucmbAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "For numbers, booleans, strings, and `nil`, there is nothing more to do: they map directly to the elementary JSON datatypes. And `SequencableCollecton` maps well enough to JSON arrays. But already for `Dictionary`, we need a more elaborate encoding:\r{{gtExample:name=IpfsExamples>>#cborCidForDictionary|expanded=}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668094+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668094+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AcVkFV+CDQCWugXXAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What you see under \"Data\" is the JSON-like encoding that IPFS actually stores. But when you click on the button with the right-pointing arrow (top right), you get an inspector for the reconstructed Pharo object. The basic idea of this encoding is that all Pharo objects are encoded as JSON-style maps with a single entry whose key indicates the object type, which is usually the class."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.6681+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.6681+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CMVkFV+CDQCWu4HgAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The translation between Pharo objects and their JSON-like representation is handled by an {{gtClass:name=IpfsMapper}}. You can use custom mappers via the methods {{gtMethod:name=Object>>#storeInIpfsUsing:}} and {{gtMethod:name=IpfsCid>>#loadObjectUsing:}}. The simpler methods {{gtMethod:name=Object>>#storeInIpfs}} and {{gtMethod:name=IpfsCid>>#loadObject}} use a default mapper defined in {{gtClass:name=IpfsDefaultMapper}}. It handles only a few frequently used Pharo classes at the moment, but eventually it should handle all standard Pharo objects that can meaningfully be exchanged with software written in other languages. You can add support for more classes by subclassing {{gtClass:name=IpfsDefaultMapper}}, whereas subclassing {{gtClass:name=IpfsMapper}} makes it possible to replace the default encodings by different ones. For a concrete example of encoding and decoding, look at {{gtMethod:name=IpfsDefaultMapper>>#mappingForDictionary|expanded=}}."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:26:29.668107+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-06-30T17:40:22.26467+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "DsVkFV+CDQCWvLkcAqJOWw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Ready for more? Then move on to [[IPFS Tutorial, part 3: beyond CIDs]]]"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-06-30T17:26:29.667608+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-06-30T17:26:29.667608+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "IPFS Tutorial, part 2: beyond bytes"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "04c26415-5f82-0d00-96a6-cec102a24e5b"
	}
}